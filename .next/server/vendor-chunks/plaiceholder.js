"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/plaiceholder";
exports.ids = ["vendor-chunks/plaiceholder"];
exports.modules = {

/***/ "(rsc)/./node_modules/plaiceholder/dist/plaiceholder.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/plaiceholder/dist/plaiceholder.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlaiceholder: () => (/* binding */ getPlaiceholder)\n/* harmony export */ });\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sharp */ \"sharp\");\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar _excluded = [\n    \"a\"\n], _excluded2 = [\n    \"autoOrient\",\n    \"size\",\n    \"format\",\n    \"brightness\",\n    \"saturation\",\n    \"removeAlpha\"\n], _excluded3 = [\n    \"width\",\n    \"height\"\n];\n/* Utils\n   =========================================== */ var arrayChunk = function arrayChunk(arr, size) {\n    return arr.length > size ? [\n        arr.slice(0, size)\n    ].concat(arrayChunk(arr.slice(size), size)) : [\n        arr\n    ];\n};\nvar toRGBAString = function toRGBAString(_ref) {\n    var r = _ref.r, g = _ref.g, b = _ref.b, a = _ref.a;\n    if (typeof a === \"undefined\") return \"rgb(\" + [\n        r,\n        g,\n        b\n    ].join(\",\") + \")\";\n    return \"rgba(\" + [\n        r,\n        g,\n        b,\n        a\n    ].join(\",\") + \")\";\n};\nvar getPixels = function getPixels(_ref2) {\n    var _ref3;\n    var data = _ref2.data, info = _ref2.info;\n    var channels = info.channels, width = info.width;\n    var rawBuffer = (_ref3 = []).concat.apply(_ref3, data);\n    var allPixels = arrayChunk(rawBuffer, channels);\n    var rows = arrayChunk(allPixels, width);\n    var pixels = rows.map(function(row) {\n        return row.map(function(pixel) {\n            var r = pixel[0], g = pixel[1], b = pixel[2], a = pixel[3];\n            return _extends({\n                r: r,\n                g: g,\n                b: b\n            }, typeof a === \"undefined\" ? {} : {\n                a: Math.round(a / 255 * 1000) / 1000\n            });\n        });\n    });\n    return pixels;\n};\nvar getCSS = function getCSS(_ref4) {\n    var pixels = _ref4.pixels, info = _ref4.info;\n    var linearGradients = pixels.map(function(row) {\n        var rowPixels = row.map(function(pixel) {\n            return toRGBAString(pixel);\n        });\n        var gradient = rowPixels.map(function(pixel, i) {\n            var start = i === 0 ? \"\" : \" \" + i / rowPixels.length * 100 + \"%\";\n            var end = i === rowPixels.length ? \"\" : \" \" + (i + 1) / rowPixels.length * 100 + \"%\";\n            return \"\" + pixel + start + end;\n        }).join(\",\");\n        return \"linear-gradient(90deg, \" + gradient + \")\";\n    });\n    if (linearGradients.length !== info.height) {\n        console.error(\"Woops! Something went wrong here and caused the color height to differ from the source height.\");\n    }\n    var backgroundPosition = linearGradients.map(function(_, i) {\n        return i === 0 ? \"0 0 \" : \"0 \" + i / (linearGradients.length - 1) * 100 + \"%\";\n    }).join(\",\");\n    var backgroundSize = \"100% \" + 100 / linearGradients.length + \"%\";\n    return {\n        backgroundImage: linearGradients.join(\",\"),\n        backgroundPosition: backgroundPosition,\n        backgroundSize: backgroundSize,\n        backgroundRepeat: \"no-repeat\"\n    };\n};\nvar getSVG = function getSVG(_ref5) {\n    var _ref7;\n    var pixels = _ref5.pixels, info = _ref5.info;\n    var chunkRects = pixels.map(function(row, y) {\n        return row.map(function(_ref6, x) {\n            var a = _ref6.a, rgb = _objectWithoutPropertiesLoose(_ref6, _excluded);\n            var colorProps = typeof a !== \"undefined\" ? {\n                fill: toRGBAString(rgb),\n                \"fill-opacity\": a\n            } : {\n                fill: toRGBAString(rgb),\n                \"fill-opacity\": 1\n            };\n            return [\n                \"rect\",\n                _extends({}, colorProps, {\n                    width: 1,\n                    height: 1,\n                    x: x,\n                    y: y\n                })\n            ];\n        });\n    });\n    if (chunkRects.length !== info.height) {\n        console.error(\"Woops! Something went wrong here and caused the color height to differ from the source height.\");\n    }\n    var rects = (_ref7 = []).concat.apply(_ref7, chunkRects);\n    return [\n        \"svg\",\n        {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"100%\",\n            height: \"100%\",\n            shapeRendering: \"crispEdges\",\n            preserveAspectRatio: \"none\",\n            viewBox: \"0 0 \" + info.width + \" \" + info.height,\n            style: {\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transformOrigin: \"top left\",\n                transform: \"translate(-50%, -50%)\",\n                right: 0,\n                bottom: 0\n            }\n        },\n        rects\n    ];\n};\nvar getPlaiceholder = function getPlaiceholder(src, _temp) {\n    var _ref8 = _temp === void 0 ? {} : _temp, _ref8$autoOrient = _ref8.autoOrient, autoOrient = _ref8$autoOrient === void 0 ? false : _ref8$autoOrient, _ref8$size = _ref8.size, size = _ref8$size === void 0 ? 4 : _ref8$size, _ref8$format = _ref8.format, format = _ref8$format === void 0 ? [\n        \"png\"\n    ] : _ref8$format, _ref8$brightness = _ref8.brightness, brightness = _ref8$brightness === void 0 ? 1 : _ref8$brightness, _ref8$saturation = _ref8.saturation, saturation = _ref8$saturation === void 0 ? 1.2 : _ref8$saturation, _ref8$removeAlpha = _ref8.removeAlpha, removeAlpha = _ref8$removeAlpha === void 0 ? false : _ref8$removeAlpha, options = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n    try {\n        /* Optimize\n      ---------------------------------- */ return Promise.resolve(sharp__WEBPACK_IMPORTED_MODULE_0__(src).metadata().then(function(_ref9) {\n            var width = _ref9.width, height = _ref9.height, metadata = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n            if (!width || !height) {\n                throw Error(\"Could not get required image metadata\");\n            }\n            return _extends({\n                width: width,\n                height: height\n            }, metadata);\n        })).then(function(metadata) {\n            var _sharp$resize;\n            var sizeMin = 4;\n            var sizeMax = 64;\n            var isSizeValid = sizeMin <= size && size <= sizeMax;\n            !isSizeValid && console.error([\n                \"Please enter a `size` value between\",\n                sizeMin,\n                \"and\",\n                sizeMax\n            ].join(\" \")); // initial optimization\n            var pipelineStage1 = (_sharp$resize = sharp__WEBPACK_IMPORTED_MODULE_0__(src).resize(size, size, {\n                fit: \"inside\"\n            })).toFormat.apply(_sharp$resize, format).modulate(_extends({\n                brightness: brightness,\n                saturation: saturation\n            }, options != null && options.hue ? {\n                hue: options == null ? void 0 : options.hue\n            } : {}, options != null && options.lightness ? {\n                lightness: options == null ? void 0 : options.lightness\n            } : {})); // alpha\n            var pipelineStage2 = removeAlpha === false ? pipelineStage1 : pipelineStage1.removeAlpha(); // autoOrientation\n            var pipelineStage3 = autoOrient === false ? pipelineStage2 : pipelineStage2.rotate();\n            var pipeline = pipelineStage3;\n            /* Return\n        ---------------------------------- */ return Promise.resolve(pipeline.clone().stats().then(function(_ref10) {\n                var _ref10$dominant = _ref10.dominant, r = _ref10$dominant.r, g = _ref10$dominant.g, b = _ref10$dominant.b;\n                return {\n                    r: r,\n                    g: g,\n                    b: b,\n                    hex: \"#\" + [\n                        r,\n                        g,\n                        b\n                    ].map(function(x) {\n                        return x.toString(16).padStart(2, \"0\");\n                    }).join(\"\")\n                };\n            })).then(function(color) {\n                return Promise.resolve(pipeline.clone().normalise().toBuffer({\n                    resolveWithObject: true\n                }).then(function(_ref11) {\n                    var data = _ref11.data, info = _ref11.info;\n                    return \"data:image/\" + info.format + \";base64,\" + data.toString(\"base64\");\n                })[\"catch\"](function(err) {\n                    console.error(\"base64 generation failed\", err);\n                    throw err;\n                })).then(function(base64) {\n                    return Promise.resolve(pipeline.clone().raw().toBuffer({\n                        resolveWithObject: true\n                    }).then(function(_ref12) {\n                        var data = _ref12.data, info = _ref12.info;\n                        var pixels = getPixels({\n                            data: data,\n                            info: info\n                        });\n                        var css = getCSS({\n                            pixels: pixels,\n                            info: info\n                        });\n                        var svg = getSVG({\n                            pixels: pixels,\n                            info: info\n                        });\n                        return {\n                            pixels: pixels,\n                            css: css,\n                            svg: svg\n                        };\n                    })[\"catch\"](function(err) {\n                        console.error(\"pixel generation failed\", err);\n                        throw err;\n                    })).then(function(_ref13) {\n                        var pixels = _ref13.pixels, css = _ref13.css, svg = _ref13.svg;\n                        return {\n                            color: color,\n                            css: css,\n                            base64: base64,\n                            metadata: metadata,\n                            pixels: pixels,\n                            svg: svg\n                        };\n                    });\n                });\n            });\n        });\n    } catch (e) {\n        return Promise.reject(e);\n    }\n};\n //# sourceMappingURL=plaiceholder.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/plaiceholder/dist/plaiceholder.esm.js\n");

/***/ })

};
;